// MQ135 - Version: Latest 
#include <MQ135.h>
#define SENSOR 2
#define RZERO 206.85    //  Define RZERO Calibration Value
MQ135 gasSensor = MQ135(2);

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a647639e-5f0d-4f92-bf51-be4c156a2e73

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float air;
  float light;
  float soil_moisture;
  float soil_pH_value;
  CloudTemperatureSensor temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_Sensor.h>

#include "DHT.h"

#define DHTPIN 18
#define DHTTYPE DHT11

DHT dht(18, DHT11);

#include <BH1750.h>
#include <Wire.h>
BH1750 lightMeter;

int Moisture_signal = 34;

int buzzer = 5;
int Th = 500;

int moisture;

const int potPin = 33;
float ph;
float Value = 0;
void setup() {
  // Initialize serial and wait for port to open:
  pinMode(potPin, INPUT);
 
  Serial.begin(115200);
  //light
  Wire.begin();
  lightMeter.begin();
  Serial.println(F("BH1750 Test begin"));

  Serial.println(F("DHTxx test!"));
  
  float rzero = gasSensor.getRZero();
  delay(3000);
  Serial.print("MQ135 RZERO Calibration Value : ");
  Serial.println(rzero);

  dht.begin();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);



  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

}

void loop() {
  ArduinoCloud.update();
  // Your code here
  
   float ppm = gasSensor.getPPM();
   air = ppm;
  
  Serial.print("CO2 ppm value : ");
  Serial.println(ppm);

  Value = analogRead(potPin);
  Serial.print(Value);
  Serial.print(" | ");
  float voltage = Value * (3.3 / 4095.0);
  ph = (3.3 * voltage);
  soil_pH_value = ph;
  Serial.println(ph);
  

  float h = dht.readHumidity();
  float t = dht.readTemperature();
  float f = dht.readTemperature(true);
  temperature = t;
  int Moisture = analogRead(Moisture_signal);
  moisture = (4095 - Moisture);
  soil_moisture = moisture;
  Serial.print("Soil Moisture Level: ");
  Serial.println(moisture);

  // put your main code here, to run repeatedly:
  
  float lux = lightMeter.readLightLevel();
  light = lux;
  Serial.print("Light: ");
  Serial.print(lux);
  Serial.println(" lx");

  float hif = dht.computeHeatIndex(f, h);
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.println(F("°F"));

  if (ppm > Th)
  {
    digitalWrite(buzzer, 1);
    Serial.print("Alert! There might be  smoke.");
  }
  else if (lux < 400)
  {
    digitalWrite(buzzer, 1);
    Serial.print("Alert! Something is blocking the light.");
  }
  else if (Moisture < 700)
  {
    digitalWrite(buzzer, 1);
    Serial.print("Alert! The soil is drying up.");
  }
  else if (t > 70)
  {
    digitalWrite(buzzer, 1);
    Serial.print("Alert! There might be a fire.");
  }
  else
  {
    digitalWrite(buzzer, 0);
    Serial.print("Everything seems fine :)");

  }
  delay(1000);

}


/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/

















